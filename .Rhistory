testAbs
max(testAbs)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreq(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
axis(4, at=wordFreq(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=wordFreq(ngrams, "انبانا"), col="red")
legend('topright', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreqAbs(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=wordFreqAbs(ngrams, "انبانا"), col="red")
legend('topright', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreqAbs(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
x = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400)
xlabVarAH = c(0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400)
xlabVarCE = as.integer((xlabVarAH-xlabVarAH/33)+622)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreqAbs(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=wordFreqAbs(ngrams, "انبانا"), col="red")
legend('topright', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreqAbs(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=wordFreqAbs(ngrams, "انبانا"), col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=wordFreqRel(ngrams, "انبانا"), ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=wordFreqRel(ngrams, "انبانا"), col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
varPlot = wordFreqRel(ngrams, "انبانا")
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
varPlot = wordFreqAbs(ngrams, "انبانا")
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
wordFreqRel <- function(freqTable, item){
x = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400)
#freqTable = ngrams
#item = "انبانا"
tempData = freqTable[freqTable$ngram == item,]
tempData = as.integer(as.vector(tempData))
tempData = tempData[3:31]/as.integer(as.vector(allFreqs))*100
smoothingmainVar = predict(loess(tempData~x, span=.4))
return(smoothingmainVar)
}
varPlot = wordFreqAbs(ngrams, "انبانا")
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
varPlot = wordFreqRel(ngrams, "انبانا")
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("anba'ana"),
lty=1, col=c('red'), bty='n', cex=.75)
CairoPDF("~/Documents/test.pdf")
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("انبانا"),
lty=1, col=c('red'), bty='n', cex=.75)
dev.off()
library(Cairo)
install.packages("Cairo")
library(Cairo)
packageDescription("Cairo")
CairoPDF("~/Documents/test.pdf")
Cairo.CairoPDF("~/Documents/test.pdf")
CairoPDF("~/Documents/test.pdf")
CairoPDF("test.pdf")
library(Cairo)
install.packages("Cairo")
library(Cairo)
pdf("~/Documents/test.pdf",width=12,height=6)
plot(bty="n",
x=x, xlim = c(0,1400), xaxt="n",
y=varPlot, ylab="Word Frequencies",
type="n", col="red",
xlab = "",
main="")
axis(1, at=xlabVarAH,labels=xlabVarAH, col.axis="black", las=2)
mtext("AH",1,line=1,at=1450,col="black")
axis(3, at=xlabVarAH,labels=xlabVarCE, col.axis="black", las=2)
mtext("CE",3,line=1,at=1450,col="black")
#axis(4, at=wordFreqAbs(ngrams, "انبانا"), col.axis="black", las=2)
lines(x=x, y=varPlot, col="red")
legend('topleft', c("انبانا"),
lty=1, col=c('red'), bty='n', cex=.75)
dev.off()
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
fileTest = "/Users/romanov/Documents/a.CombinedCollections/Ngrams/2_ngrammed_collections/1gram_NRM_NgramChronoTable_2up_test"
# Some variables
periods = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400)
# Load word frequency data
#ngrams <- read.csv(text = getURL(file1), header=F, sep="\t")
# give it a few minutes --- the file is large so it takes a while to download it and then load it into memory
library(data.table)
system.time(ngrams <- fread(fileTest, header=F, sep = '\t'))
ngrams(100,)
ngrams[100,]
ngrams[is.na(ngrams)] <- 0
ngrams[100,]
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
install.packages("shinythemes")
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
library(shinytheme)
library(shiny)
library(shinythemes)
library(data.table)
library(plotly)
############################################################################################
# 0.0 Required libraries ###################################################################
############################################################################################
library(shiny)
library(shinythemes)
library(data.table)
library(plotly)
require(markdown)
############################################################################################
# 0.1 Loading Data #########################################################################
############################################################################################
ngrams <- fread("./data/1gram_NRM_NgramChronoTable_10up_BW", header=F, sep = '\t')
colnames(ngrams) <- c("ngram", "freq", "0", "50", "100", "150", "200", "250", "300", "350", "400", "450", "500", "550", "600", "650", "700", "750", "800", "850", "900", "950", "1000", "1050", "1100", "1150", "1200", "1250", "1300", "1350", "1400", "1450")
# Load freqs by periods
allFreqs = read.csv("./data/1gram_NRM_NgramChronoTable_Cummulative", header=F, sep=",")
allFreqs = allFreqs[,2]
allFreqs = allFreqs[2:30]
############################################################################################
# 0.2 Global functions #####################################################################
############################################################################################
wordFreqRelRE <- function(freqTable, item, spanVar){
periods = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400)
item = gsub(" ?#", "|", item)
item = gsub("^#", "", item)
item = paste0("^(", item, ")$")
tempData = subset(freqTable, grepl(item, ngram))
tempData = subset(tempData, select = -c(ngram, freq))
tempData = colSums(tempData)
tempData = as.integer(as.vector(tempData))
tempData = tempData[1:29]/as.integer(as.vector(allFreqs))*100
#smoothingmainVar = tempData
smoothingmainVar = predict(loess(tempData~periods, span=spanVar))
smoothingmainVar[smoothingmainVar < 0] = 0
return(smoothingmainVar)
}
periods = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400)
xlabVarAH = c(0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400)
xlabVarCE = as.integer((xlabVarAH-xlabVarAH/33)+622)
spanVar = .4
############################################################################################
# 1.0 User Interface #######################################################################
############################################################################################
ui <- shinyUI(
navbarPage(
theme = shinytheme("united"),
div(img(src = "RM_inverse.png", height = "25"),
"Naṯarāt al-ʿUṣūr min al-Muʿaṣṣarāt al-Manṯūr, v.0.1"),
windowTitle = "Naṯarāt al-ʿUṣūr min al-Muʿaṣṣarāt al-Manṯūr",
tabPanel(title = "Ngrams in Transliteration",
sidebarPanel(
textInput(inputId="text1", label = "Line 1", value = "#Baġdād #b?bgdAd"),
textInput(inputId="text2", label = "Line 2", value = "#Dimašq #b?dmEq"),
textInput(inputId="text3", label = "Line 3", value = ""),
textInput(inputId="text4", label = "Line 4", value = ""),
textInput(inputId="text5", label = "Line 5", value = ""),
actionButton(inputId="go", label="Generate graph...")
),
mainPanel(
#h4(verbatimTextOutput("value")),
#plotOutput("plot"),br(),
plotlyOutput("plotly"),br(),
includeMarkdown("./www/BuckwalterSimplified.txt")
)
),
tabPanel(title = "About",
sidebarPanel(
#h4("Transliteration scheme"),
includeMarkdown("./www/BuckwalterSimplified.txt")
),
mainPanel(
includeMarkdown("./www/intro.md")
)
)
)
)
############################################################################################
# 2.0 Server ###############################################################################
############################################################################################
server <- shinyServer(
function(input, output) {
searchVector = eventReactive(input$go,
{
c(input$text1, input$text2, input$text3, input$text4, input$text5)
}
)
# You can access the value of the widget with input$text, e.g.
#output$value <- renderPrint({ c(input$text1, input$text2, input$text3, input$text4, input$text5) })
# Plotly Graph with interactivity
output$plotly <- renderPlotly({
#searchVector = c(input$text1, input$text2, input$text3, input$text4, input$text5)
maximum = c()
for (n in searchVector()){
lineN = wordFreqRelRE(ngrams, n, spanVar)
maximum = c(maximum, lineN)
}
maximum = max(maximum)
# generating plot_ly
ahAxis <- list(
tickfont = list(color = "black"),
showticklabels = TRUE,
side = "bottom",
title = "Years According to the Islamic Lunar (<i>hijrī</i>) Calendar",
range = xlabVarCE
)
plotlyGraph = plot_ly(type="scatter", mode="markers+lines")
counter = 0
searchVectorNew = c()
for (n in searchVector()){
if(n != ""){
counter = counter+1
searchVectorNew = c(searchVectorNew,n)
lineN = wordFreqRelRE(ngrams, n, spanVar)
nameVar = strsplit(n, " ?#")[[1]][2]
#print(nameVar)
plotlyGraph <- add_trace(plotlyGraph,
y=lineN, x=periods,
type="scatter",
name=nameVar,
mode="markers+lines",
hoverinfo = 'text',
text = ~paste0(
'Date:', periods,
'AH/', as.integer((periods-periods/33)+622), "CE"
))
}
}
plotlyGraph %>%
layout(
xaxis  = ahAxis
)
})
}
)
############################################################################################
# 3.0 Start Your Engines! ##################################################################
############################################################################################
shinyApp(ui = ui, server = server)
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Lite')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Full')
shiny::runApp('Documents/a.GraphingBiographies/__FreqReader_Full')
setwd("/Users/romanov/Documents/c.GitProjects/maximromanov.github.io/") # run this line before starting
require(ggplot2)
require(markdown)
require(knitr)
library(data.table)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library(ggplot2movies)
data <- fread("/Users/romanov/Documents/c.GitProjects/maximromanov.github.io/projects/mesa_network/rCommunities_data.txt", header=F, sep = '\t') # for local load
data <- fread("../projects/mesa_network/rCommunities_data.txt", header=F, sep = '\t')
colnames(data) = c("mod", "cat", "val", "freq")
colnames(data) = c("mod", "cat", "val", "freq")
data <- fread("/Users/romanov/Documents/c.GitProjects/maximromanov.github.io/projects/mesa_network/rCommunities_data.txt", header=F, sep = '\t') # for local load
colnames(data) = c("mod", "cat", "val", "freq")
catCount = as.vector(data$cat)
catTable = as.data.frame(table(catCount))
membersNumber = catTable[catTable=="PERSON",2]
# Modularity report
modPeop = data[data$cat=="PERSON",]
modCount = as.vector(modPeop$mod)
modTable = as.data.frame(table(modCount))
noComm = modTable[modTable==0,2]
modTable$relAll = with(modTable, Freq/membersNumber*100)
modTable$relOrg = with(modTable, Freq/(membersNumber-noComm)*100)
modTable = modTable[!modTable$modCount==0,]
modTable = modTable[order(-modTable$Freq),]
test = modTable[modTable$relOrg > 1,]
data1 = data[!data$val == "NA",]
data1 = data1[!data1$val == "Unknown",]
data1 = data1[!data1$val == "No Information",]
generateReport <- function(comm, categ, label){
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# bar plot
par(las=2) # make label text perpendicular to axis
par(mar=c(3,20,0,3)) # increase y-axis margin.
barsub = sub[(nrow(sub)-10):nrow(sub),]
barplot(barsub$freq, horiz=TRUE, names.arg=barsub$val, cex.names=1.2)
title(ylab=paste("Top 10", label), line=18, cex.lab=2)
#   # wordcloud
#   wordcloud(words = sub$val, freq = sub$freq, min.freq = 1, scale=c(3,.5),
#             max.words=200, random.order=FALSE, rot.per=0,
#             colors=brewer.pal(8, "Dark2"))
#
#   # table
#   table = sub[order(-sub$freq),]
#   table = table[table$freq > 1,]
#   table = subset(table, select = -c(mod,cat) )
#   names(table) = c(label, "Scholars")
#
#   knitr::kable((table))
}
listReport <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq > 1,]
table = subset(table, select = -c(mod,cat) )
#names(table) = c(label, "Scholars")
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
comm = "1"
categ = "PERSON"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq > 1,]
table = subset(table, select = -c(mod,cat) )
#names(table) = c(label, "Scholars")
# unlist(strsplit(t, "[:]"))[index]
u1 = '<a href="https://mesana.org/mymesa/directory_mem.php?mem='
u2 = 'target="_blank">'
u3 = '</a>'
listReport <- paste0(u1,
unlist(strsplit(table$val,"[:]"))[1],
u2,
unlist(strsplit(table$val,"[:]"))[2],
u3,
" (*weight:* ",
table$freq,")")
listReport
listReport <- paste0(table$val," (",table$freq,")")
listReport
servr::jekyll()
membersNumber = catTable[catTable=="PERSON",2]
modPeop = data[data$cat=="PERSON",]
data <- fread("/Users/romanov/Documents/c.GitProjects/maximromanov.github.io/projects/mesa_network/rCommunities_data.txt", header=F, sep = '\t') # for local load
colnames(data) = c("mod", "cat", "val", "freq")
catCount = as.vector(data$cat)
catTable = as.data.frame(table(catCount))
membersNumber = catTable[catTable=="PERSON",2]
modPeop = data[data$cat=="PERSON",]
modCount = as.vector(modPeop$mod)
modTable = as.data.frame(table(modCount))
noComm = modTable[modTable==0,2]
modTable$relAll = with(modTable, Freq/membersNumber*100)
modTable$relOrg = with(modTable, Freq/(membersNumber-noComm)*100)
View(modTable)
The community includes `r modTable$Freq[as.integer(community)`
data(acme)
print(acme, prob = acme$Get("p", format = FormatPercent))
formatC(0.456, format = "f", digits = 11, drop0trailing = TRUE)
formatC(0.456, format = "f", digits = 2, drop0trailing = TRUE)
formatC(0.456000000, format = "f", digits = 10, drop0trailing = TRUE)
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
